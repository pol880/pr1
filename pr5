//minmax
#include <stdio.h>
#include <limits.h>
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))

int minimax(int depth, int nodeIndex, int isMaximizingPlayer, int scores[], int alpha, int beta, int height) {

    if (depth == height) {
        return scores[nodeIndex];
    }

    if (isMaximizingPlayer) {
        int maxEval = INT_MIN;
        int i;
        for (i = 0; i < 2; i++) {
            int eval = minimax(depth + 1, nodeIndex * 2 + i, 0, scores, alpha, beta, height);
            maxEval = MAX(maxEval, eval);
            alpha = MAX(alpha, eval);

            if (beta <= alpha) {
                break;
            }
        }
        return maxEval;
    } else {
        int minEval = INT_MAX;
        int i;
        for ( i = 0; i < 2; i++) {
            int eval = minimax(depth + 1, nodeIndex * 2 + i, 1, scores, alpha, beta, height);
            minEval = MIN(minEval, eval);
            beta = MIN(beta, eval);

            if (beta <= alpha) {
                break;
            }
        }
        return minEval;
    }
}

int log2(int n) {
    int result = 0;
    while (n > 1) {
        n /= 2;
        result++;
    }
    return result;
}

int main() {
    int n;

    printf("Enter the number of leaf nodes (must be a power of 2): ");
    scanf("%d", &n);

    if ((n & (n - 1)) != 0) {
        printf("Error: Number of leaf nodes must be a power of 2.\n");
        return 1;
    }

    int scores[n];
    int i;

    printf("Enter the leaf node scores:\n");
    for ( i = 0; i < n; i++) {
        printf("Score of node %d: ", i);
        scanf("%d", &scores[i]);
    }

    int height = log2(n);

    int optimalValue = minimax(0, 0, 1, scores, INT_MIN, INT_MAX, height);
    printf("The optimal value is: %d\n", optimalValue);

    return 0;
}
