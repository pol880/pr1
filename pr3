//herustic serarch
#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <cstring>

#define N 3

using namespace std;

class Node {
public:
    Node* parent;
    int mat[N][N];
    int x, y;
    int cost;
    int level;
    int heuristic;

    Node(int mat[N][N], int x, int y, int newX, int newY, int level, Node* parent) {
        this->parent = parent;
        memcpy(this->mat, mat, sizeof(this->mat));
        int temp = this->mat[x][y];
        this->mat[x][y] = this->mat[newX][newY];
        this->mat[newX][newY] = temp;
        this->cost = INT_MAX;
        this->level = level;
        this->x = newX;
        this->y = newY;
    }
};

int row[] = {1, 0, -1, 0};
int col[] = {0, -1, 0, 1};

void printMatrix(int mat[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            cout << mat[i][j] << " ";
        cout << endl;
    }
}

int calculateHeuristic(int mat[N][N], int final[N][N]) {
    int distance = 0;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            int value = mat[i][j];
            if (value != 0) {
                int goalX, goalY;
                for (int k = 0; k < N; k++) {
                    for (int l = 0; l < N; l++) {
                        if (final[k][l] == value) {
                            goalX = k;
                            goalY = l;
                            break;
                        }
                    }
                }
                distance += abs(i - goalX) + abs(j - goalY);
            }
        }
    }
    return distance;
}

bool isSafe(int x, int y) {
    return (x >= 0 && x < N && y >= 0 && y < N);
}

void printPath(Node* root) {
    if (root == NULL)
        return;
    printPath(root->parent);
    printMatrix(root->mat);
    cout << endl;
}

struct Compare {
    bool operator()(Node* a, Node* b) {
        return (a->cost + a->heuristic) > (b->cost + b->heuristic);
    }
};

void solve(int initial[N][N], int x, int y, int final[N][N]) {
    priority_queue<Node*, vector<Node*>, Compare> pq;

    Node* root = new Node(initial, x, y, x, y, 0, NULL);
    root->heuristic = calculateHeuristic(initial, final);
    root->cost = 0;
    pq.push(root);

    while (!pq.empty()) {
        Node* min = pq.top();
        pq.pop();

        if (min->heuristic == 0) {
            printPath(min);
            return;
        }

        for (int i = 0; i < 4; i++) {
            if (isSafe(min->x + row[i], min->y + col[i])) {
                Node* child = new Node(min->mat, min->x, min->y, min->x + row[i], min->y + col[i], min->level + 1, min);
                child->cost = min->level + 1;
                child->heuristic = calculateHeuristic(child->mat, final);
                pq.push(child);
            }
        }
    }
}

int main() {
    int initial[N][N] = {
        {1, 2, 3},
        {5, 6, 0},
        {7, 8, 4}
    };

    int final[N][N] = {
        {1, 2, 3},
        {5, 8, 6},
        {0, 7, 4}
    };

    int x = 1, y = 2;

    solve(initial, x, y, final);

    return 0;
}
